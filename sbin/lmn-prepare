#!/usr/bin/python3
#
# lmn-prepare
# thomas@linuxmuster.net
# 20230104
#

import configparser
import datetime
import getopt
import getpass
import netifaces
import os
import pathlib
import pwd
import re
import reconfigure
import socket
import subprocess
import sys

from IPy import IP
from reconfigure.configs import FSTabConfig


# global values
hostname = None
hostip = None
firewallip = None
gateway = None
ipnet = None
ipnet_default = '10.0.0.'
bitmask_default = '16'
ipnet_babo = '10.16.1.'
bitmask_babo = '12'
serverip = ''
iface = None
iface_default = None
network = None
bitmask = None
netmask = None
broadcast = None
domainname = 'linuxmuster.lan'
swapsize = '2'
pkgs = None
ipnr = None
rootpw_default = 'Muster!'
rootpw = 'Muster!'
profile_list = ['server', 'ubuntu']
user_list = ['linuxmuster', 'linuxadmin', 'lmn', 'lmnadmin']
profile = None
profile_ini = None
pvdevice = None
vgname = 'vg_srv'
vg_exists = False
lvmmand = ['linbo', 'global', 'default-school']
lvmvols = None
lvmvols_default = 'var:10,linbo:40,global:10,default-school:100%FREE'
quotamntopts = 'user_xattr,acl,usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv0,barrier=1'
unattended = False
initial = False
setup = False
reboot = False
force = False
updates = False
iniread = False
createcert = False
nokeys = False
nopw = False
setup_mode = None
sharedir = '/usr/share/linuxmuster/prepare'
templates = sharedir + '/templates'
libdir = '/var/lib/linuxmuster'
prepini = libdir + '/prepare.ini'
setupini = libdir + '/setup.ini'
purgepkgs = 'lxc lxc-utils lxcfs snapd'
srvpkgs = 'linuxmuster-base7 linuxmuster-linbo7 linuxmuster-webui7 linuxmuster-linbo-gui7 sophomorix-samba'
swapfile = '/swap.img'


## functions start

# help
def usage(rc):
    print('Usage: lmn-prepare [options]')
    print('\n [options] are:\n')
    print('-x, --force                 : Force run on an already configured system.')
    print('-i, --initial               : Prepare the appliance initially for rollout.')
    print('-s, --setup                 : Further appliance setup (network, swapsize).')
    print('                              Note: You have to use either -i or -s.')
    print('-t, --hostname=<hostname>   : Hostname to apply (optional, works only with')
    print('                              server profile).')
    print('-n, --ipnet=<ip/bitmask>    : Ip address and bitmask assigned to the host')
    print('                              (optional, default is 10.0.0.x/16, depending')
    print('                              on the profile).')
    print('-p, --profile=<profile>     : Host profile to apply, mandatory. Expected')
    print('                              values are "server" or "ubuntu".')
    print('                              Profile name is also used as hostname, except for')
    print('                              "server" if set with -t.')
    print('-c, --createcert            : Create self signed server cert (to be used only')
    print('                              in setup mode and with ubuntu profile).')
    print('-l, --pvdevice=<device>     : Initially sets up lvm on the given device (server')
    print('                              profile only). <device> can be a partition or an')
    print('                              entire disk.')
    print('-v, --volumes=<volumelist>  : List of lvm volumes to create (to be used together')
    print('                              with -l/--pvdevice). Syntax (size in GiB):')
    print('                              <name>:<size>,<name>:<size>,...')
    print('-f, --firewall=<ip>         : Firewall ip address (default *.*.*.254).')
    print('-g, --gateway=<ip>          : Gateway ip address (default is firewall ip).')
    print('-d, --domain=<domainname>   : Domainname (default linuxmuster.lan).')
    print('-r, --serverip=<serverip>   : Ip address of the server (unattended mode only).')
    print('-w, --swapsize=<size>       : Swapfile size in GB (default "2").')
    print('-a, --rootpw=<password>     : Set root password (only with -s).')
    print('-b, --reboot                : Reboots finally (only in unattended mode).')
    print('-u, --unattended            : Unattended mode, do not ask, use defaults.')
    print('-e, --default               : Sets default (10.0.0.0/16) network addresses,')
    print('                              triggers setup and unattended modes, needs profile')
    print('                              (uses saved profile from initial run).')
    print('-o, --do-it-like-babo       : Like above, but uses "babo" (10.16.0.0/12) network')
    print('                              addresses.')
    print('-j, --no-keys               : Do not create ssh keys')
    print('                              (only in setup mode and together with -x).')
    print('-k, --no-pw                 : Do not set admin password')
    print('                              (only in setup mode and together with -x).')
    print('-h, --help                  : Print this help.')
    print('\nNote on lvm volumes:')
    print('- Default value for volumes is:')
    print('  "' + lvmvols_default + '".')
    print('- At least "linbo", "global" and "default-school" must be given.')
    print('- "nn%FREE" means "use nn% of the remaining free space of the device for this volume".')
    print('  Example: "linbo:50%FREE,global:10,default-school:100%FREE" means "linbo" takes 50% of')
    print('  the volume, "global" takes 10G and "default-school" finally takes all of the rest.')
    print('- "global" and "default-school" are mounted with quota options.')
    sys.exit(rc)


# test internet connection by deb.linuxmuster.net
def internet(host="deb.linuxmuster.net", port=443, timeout=3):
    """
    Host: deb.linuxmuster.net
    OpenPort: 443/tcp
    Service: https (http protocol over TLS/SSL)
    """
    try:
        socket.setdefaulttimeout(timeout)
        socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((host, port))
        return True
    except Exception as ex:
        #print ex.message
        return False


# print without linefeed
def printr(msg):
    print(msg, end='', flush=True)


# return datetime string
def dtStr():
    return "{:%Y%m%d%H%M%S}".format(datetime.datetime.now())


# return content of text file
def readTextfile(tfile):
    if not os.path.isfile(tfile):
        return False, None
    try:
        infile = open(tfile, 'r')
        content = infile.read()
        infile.close()
        return True, content
    except:
        print('Cannot read ' + tfile + '!')
        return False, None


# write textfile
def writeTextfile(tfile, content, flag):
    try:
        outfile = open(tfile, flag)
        outfile.write(content)
        outfile.close()
        return True
    except:
        print('Failed to write ' + tfile + '!')
        return False


# replace string in file
def replaceInFile(tfile, search, replace):
    rc = False
    try:
        bakfile = tfile + '.bak'
        copyfile(tfile, bakfile)
        rc, content = readTextfile(tfile)
        rc = writeTextfile(tfile, content.replace(search, replace), 'w')
    except:
        print('Failed to write ' + tfile + '!')
        if os.path.isfile(bakfile):
            copyfile(bakfile, tfile)
    if os.path.isfile(bakfile):
        os.unlink(bakfile)
    return rc


# return detected network interfaces
def detectedInterfaces():
    iface_list = netifaces.interfaces()
    iface_list.remove('lo')
    iface_count = len(iface_list)
    if iface_count == 1:
        iface_default = iface_list[0]
    else:
        iface_default = None
    return iface_list, iface_default


# returns default network interface
def getDefaultIface():
    # first try to get a single interface
    iface_list, iface_default = detectedInterfaces()
    if iface_default is not None:
        return iface_list, iface_default
    # second if more than one get it by default route
    route = "/proc/net/route"
    with open(route) as f:
        for line in f.readlines():
            try:
                iface, dest, _, flags, _, _, _, _, _, _, _, =  line.strip().split()
                if dest != '00000000' or not int(flags, 16) & 2:
                    continue
                return iface_list, iface
            except:
                continue
    return iface_list, iface_default


# returns entered interface name
def inputIface(iface, iface_default, iface_list):
    while True:
        iface = input('Enter network interface to use ' + str(iface_list) + ': ')
        iface = iface or iface_default
        if iface in iface_list:
            return iface
        print("Invalid entry!")


# returns entered network address
def inputIpnet(ipnet):
    ipnet_saved = ipnet
    ipnet = input('Enter host ip address with net or bitmask [' + ipnet + ']: ')
    return ipnet or ipnet_saved


# returns entered firewall ip
def inputFirewallip(firewallip):
    firewallip_saved = firewallip
    firewallip = input('Enter firewall ip address [' + firewallip + ']: ')
    return firewallip or firewallip_saved


# returns entered gateway ip
def inputGateway(gateway):
    gateway_saved = gateway
    gateway = input('Enter gateway ip address [' + gateway + ']: ')
    return gateway or gateway_saved


# returns entered hostname
def inputHostname(hostname):
    hostname_saved = hostname
    hostname = input('Enter hostname [' + str(hostname) + ']: ')
    return hostname or hostname_saved


# returns entered domainname
def inputdomainname(domainname):
    domainname_saved = domainname
    domainname = input('Enter domainname [' + str(domainname) + ']: ')
    return domainname or domainname_saved


# returns entered pvdevice
def inputPvdevice(pvdevice):
    pvdevice_saved = pvdevice
    pvdevice = input('Enter physical device to use for LVM [' + str(pvdevice) + ']: ')
    return pvdevice or pvdevice_saved


# return entered lvm volume definitions
def inputLvmvols(lvmvols):
    lvmvols_saved = lvmvols
    lvmvols = input('Enter lvm volumes definition [' + str(lvmvols) + ']: ')
    return lvmvols or lvmvols_saved


# returns entered swapsize
def inputSwapsize(swapsize):
    swapsize_saved = swapsize
    swapsize = input('Enter swap size in GiB [' + str(swapsize) + ']: ')
    return swapsize or swapsize_saved


# test valid hostname
def isValidHostname(hostname):
    try:
        if (len(hostname) > 63 or hostname[0] == '-' or hostname[-1] == '-'):
            return False
        allowed = re.compile(r'[a-z0-9\-]*$', re.IGNORECASE)
        if allowed.match(hostname):
            return True
        else:
            return False
    except:
        return False


# test valid domainname
def isValidDomainname(domainname):
    try:
        for label in domainname.split('.'):
            if not isValidHostname(label):
                return False
        return True
    except:
        return False


# test if ip matches network
def ipMatchNet(ip, network, bitmask):
    if not isValidHostIpv4(ip):
        return False
    try:
        ipnet = ip + '/' + bitmask
        n = IP(ipnet, make_net=True)
        network_ip = IP(n).strNormal(0)
        if network == network_ip:
            return True
        else:
            return False
    except:
        return False


# test valid ipv4 address
def isValidHostIpv4(ip):
    try:
        ipv4 = IP(ip)
        if not ipv4.version() == 4:
            return False
        ipv4str = IP(ipv4).strNormal(0)
        if (int(ipv4str.split('.')[0]) == 0 or int(ipv4str.split('.')[3]) == 0):
            return False
        for i in ipv4str.split('.'):
            if int(i) > 254:
                return False
        return True
    except:
        return False


# get issue name
def getIssue():
    rc, content = readTextfile('/etc/issue')
    issue = content.split(' ')[1]
    if issue > '17.10' or issue == 'Bionic':
        return 'bionic'
    else:
        return 'xenial'


# remove unnecessary stuff
def do_cleaning():
    print('## Remove unnecessary stuff')
    subprocess.call('DEBIAN_FRONTEND=noninteractive apt-get -y purge ' + purgepkgs, shell=True)
    subprocess.call('/usr/share/linuxmuster/prepare/disable-cloud-services', shell=True)


# return lvm volume mountpoint
def getVolmount(volname):
    if volname == 'var':
        volmount = '/' + volname
    elif volname == 'linbo':
        volmount = '/srv/' + volname
    elif volname == 'global':
        volmount = '/srv/samba/' + volname
    elif volname == 'default-school':
        volmount = '/srv/samba/schools/' + volname
    else:
        volmount = None
    return volmount


# create lvm volumes array
def do_lvmvols_array(lvmvols, lvmmand):
    if lvmvols is None:
        return None
    # test if all mandatory volumes are present
    for volume in lvmmand:
        if volume not in lvmvols:
            print('Volume ' + volume + ' is not defined!')
            return None
    # create array
    lvmvols_array = []
    try:
        for volume in lvmvols.split(','):
            volume_array = volume.split(':')
            volname = volume_array[0]
            volsize = volume_array[1]
            volmount = getVolmount(volname)
            # test if volname is valid
            volvalid = re.match('^[\w-]+$', volname) is not None
            if not volvalid or volmount is None:
                print(volname + ' is no valid volume name.')
                return None
            # test size parameter
            try:
                int(volsize.split('%', 1)[0])
            except Exception as error:
                print(volsize + ' is no valid volume size.')
                return None
            volume_array.append(volmount)
            lvmvols_array.append(volume_array)
    except Exception as error:
        print(Exception)
        return None
    return lvmvols_array

# lvm
def do_lvm():
    print('## LVM')
    # create lvm
    print('# Creating physical volume ' + pvdevice + '.')
    if subprocess.call('pvcreate ' + pvdevice, shell=True) != 0:
        print('Failed!')
        sys.exit(1)
    # read fstab
    rc, fstab = readTextfile('/etc/fstab')
    fstab = fstab + '\n'
    print('# Creating volume group ' + vgname + '.')
    if subprocess.call('vgcreate ' + vgname + ' ' + pvdevice, shell=True) != 0:
        print('Failed!')
        sys.exit(1)
    var_on_lvm = False
    for item in lvmvols_array:
        volname = item[0]
        volsize = item[1]
        if '%' in volsize:
            volsize = ' -l ' + volsize
        else:
            volsize = ' -L ' + volsize + 'G'
        volmnt = item[2]
        subprocess.call('mkdir -p ' + volmnt, shell=True)
        volpath = '/dev/' + vgname + '/' + volname
        print('# Creating logical volume ' + volname + '.')
        lvcreate = 'lvcreate' + volsize + ' -n ' + volname + ' ' + vgname
        #print('# ' + lvcreate)
        if subprocess.call(lvcreate, shell=True) != 0:
            sys.exit(1)
        if subprocess.call('mkfs.ext4 -L ' + volname + ' ' + volpath, shell=True) != 0:
            sys.exit(1)
        # set quota mount options
        if volname == 'global' or volname == 'default-school':
            mntopts = quotamntopts
        else:
            mntopts = 'defaults'
        fstab = fstab + volpath + ' ' + volmnt + ' ext4 ' + mntopts + ' 0 1\n'
        if volmnt == '/var':
            var_on_lvm = True
    print('# Writing /etc/fstab.')
    if not writeTextfile('/etc/fstab', fstab, 'w'):
        sys.exit(1)
    if var_on_lvm:
        print('# Moving /var.')
        if subprocess.call('mount /dev/' + vgname + '/var /mnt', shell=True) != 0:
            sys.exit(1)
        if subprocess.call('rsync -a /var/ /mnt/', shell=True) != 0:
            sys.exit(1)
        if subprocess.call('umount /mnt && rm -rf /var/*', shell=True) != 0:
            sys.exit(1)
    if subprocess.call('mount -a', shell=True) != 0:
        sys.exit(1)


# set quota mount options to fstab if no lvm is defined
def do_fstab_root():
    mntopts = quotamntopts + ',errors=remount-ro'
    config = FSTabConfig(path='/etc/fstab')
    config.load()
    count = 0
    count_max = len(config.tree.filesystems)
    while count < count_max:
        mp = config.tree.filesystems[count].mountpoint
        #print('## Mountpoint ' + str(count) + ' ' + mp)
        if mp == '/':
            print('# Modifying mount options for "' + mp + '".')
            config.tree.filesystems[count].options = mntopts
            config.save()
            subprocess.call('mount -o remount /', shell=True)
            break
        count += 1


# activate quota on server partitions
def do_quota():
    print('# Activating quota.')
    subprocess.call('mount -a', shell=True)
    subprocess.call('quotaoff -a', shell=True)
    subprocess.call('quotacheck -cvugam', shell=True)
    subprocess.call('quotaon -a', shell=True)


# swap file
def do_swap(swapsize):
    print('## Swapfile')
    gbsize = swapsize + 'G'
    if not os.path.isfile(swapfile):
        print('No swapfile found, skipping this step!')
        return
    subprocess.call('swapoff ' + swapfile, shell=True)
    subprocess.call('rm ' + swapfile, shell=True)
    if unattended == True:
        try:
            subprocess.call('fallocate -l ' + gbsize + ' ' + swapfile, shell=True)
        except:
            print('Cannot create ' + swapfile + '!')
            sys.exit(1)
    else:
        while True:
            defaultsize = swapsize
            swapsize = input('Enter the size of the swapfile in GB [' + defaultsize + ']: ')
            swapsize = swapsize or defaultsize
            gbsize = swapsize + 'G'
            rc = subprocess.call('fallocate -l ' + gbsize + ' ' + swapfile, shell=True)
            if rc == 0:
                break
            else:
                print("Invalid entry!")
    subprocess.call('chmod 600 ' + swapfile, shell=True)
    subprocess.call('mkswap ' + swapfile, shell=True)
    subprocess.call('swapon ' + swapfile, shell=True)
    subprocess.call('swapon --show', shell=True)


# root password
def do_password(rootpw):
    print('## Passwords')
    printr('# root ... ')
    rc = subprocess.call('echo "root:' + rootpw + '" | chpasswd', shell=True)
    if rc == 0:
        print('OK!')
    else:
        print('Failed!')
    for item in user_list:
        try:
            pwd.getpwnam(item)
            printr('# ' + item + ' ... ')
            rc = subprocess.call('echo "' + item + ':' + rootpw + '" | chpasswd', shell=True)
            print('OK!')
        except KeyError:
            continue


# create ssh hostkeys
def do_keys():
    print('## SSH host keys')
    hostkey_prefix = '/etc/ssh/ssh_host_'
    crypto_list = ['dsa', 'ecdsa', 'ed25519', 'rsa']
    subprocess.call('rm -f /etc/ssh/*key*', shell=True)
    for a in crypto_list:
        printr(' * ' + a + ' host key:')
        try:
            subprocess.call('ssh-keygen -t ' + a + ' -f ' + hostkey_prefix + a + '_key -N ""', shell=True)
            print(' Success!')
        except:
            print(' Failed!')
            sys.exit(1)


# create ssl certs (ubuntu only)
def do_sslcert(profile, domainname):
    print('## SSL certificate')
    ssldir = '/etc/linuxmuster/ssl'
    csrfile = ssldir + '/' + profile + '.csr'
    keyfile = ssldir + '/' + profile + '.key.pem'
    certfile = ssldir + '/' + profile + '.cert.pem'
    days = '3653'
    subprocess.call('mkdir -p ' + ssldir, shell=True)
    subprocess.call('openssl genrsa -out ' + keyfile + ' 2048', shell=True)
    subprocess.call('chmod 640 ' + keyfile, shell=True)
    subprocess.call('echo -e "\n\n\n' + domainname + '\n' + profile + '\n' + profile
        + '\n\n\n\n" | openssl req -new -key ' + keyfile + ' -out ' + csrfile, shell=True)
    subprocess.call('openssl x509 -req -days ' + days + ' -in '
        + csrfile + ' -signkey ' + keyfile + ' -out ' + certfile, shell=True)


# updates if internet connection is available
def do_updates():
    if not internet():
        print('# No internet connection!')
        sys.exit(1)
    print('## Installing updates')
    subprocess.call('DEBIAN_FRONTEND=noninteractive apt-get update', shell=True)
    res = subprocess.call('DEBIAN_FRONTEND=noninteractive apt-get -q=2 dist-upgrade', shell=True)
    subprocess.call('apt-get clean && apt-get -q=2 autoremove', shell=True)
    if res != 0:
        print('Updates failed!')
        sys.exit(res)


# install a space separated list of package names
def do_install(pkgs):
    if pkgs is None:
        return
    print('## Installing software')
    subprocess.call('DEBIAN_FRONTEND=noninteractive apt-get -q=2 install ' + pkgs, shell=True)
    subprocess.call('apt-get clean', shell=True)
    # check if essential pkgs are installed correctly
    for pkg in pkgs.split():
        print('Checking ' + pkg + ' ... ', end = '')
        res = subprocess.call('dpkg -l | grep ^"ii  ' + pkg + '"', shell=True)
        if res != 0:
            print('Failed!')
            sys.exit(1)
        else:
            print('OK.')


# merge inifiles
def mergeInis():
    print('## Merging inifiles:')
    setup = configparser.ConfigParser(inline_comment_prefixes=('#', ';'))
    for item in [setupini, prepini]:
        # skip non existant file
        if not os.path.isfile(item):
            print('# ' + item + ' not found!')
            return False
        # reading setup values
        print('# Reading ' + item)
        setup.read(item)
    # writing setup.ini
    print('# Writing ' + setupini)
    try:
        with open(setupini, 'w') as outfile:
            setup.write(outfile)
    except:
        print('# Writing failed!')
        return False
    # remove prepare.ini
    os.unlink(prepini)


# print setup values
def print_values(profile, hostname, domainname, hostip, netmask, firewallip, iface, swapsize, pvdevice, vg_exists):
    print('\n## The system has been prepared with the following values:')
    print('# Profile   : ' + profile)
    print('# Hostname  : ' + hostname)
    print('# Domain    : ' + domainname)
    print('# IP        : ' + hostip)
    print('# Netmask   : ' + netmask)
    print('# Firewall  : ' + firewallip)
    print('# Gateway   : ' + gateway)
    print('# Interface : ' + iface)
    print('# Swapsize  : ' + swapsize + 'G')
    if pvdevice is not None:
        print('# LVM device: ' + pvdevice)
        if vg_exists:
            print('  Using already existing device.')
        else:
            print('# LVM vlms  : ' + lvmvols)

## functions end


subprocess.call('clear')
print('### lmn-prepare')

# get cli args
try:
    opts, args = getopt.getopt(sys.argv[1:], "a:bcd:ef:g:hijkl:n:op:r:st:uv:w:x",
        ["rootpw=", "reboot", "createcert", "domain=", "default", "firewall=", "gateway=", "help",
        "initial", "no-keys", "no-pw", "pvdevice=", "volumes=", "ipnet=", "profile=",
        "do-it-like-babo", "serverip=", "setup", "hostname=", "unattended", "swapsize=", "force"])
except getopt.GetoptError as err:
    # print help information and exit:
    print(err)  # will print something like "option -a not recognized"
    usage(2)

# read saved profile from previous run
inifile = None
if os.path.isfile(prepini):
    inifile = prepini
elif os.path.isfile(setupini):
    inifile = setupini
if inifile is not None:
    print('## Reading profile from ' + inifile + ':')
    prep = configparser.ConfigParser(inline_comment_prefixes=('#', ';'))
    prep.read(inifile)
    try:
        profile_ini = prep.get('setup', 'profile')
        if profile_ini is not None:
            profile = profile_ini
            print('# saved profile: ' + profile_ini)
    except:
        pass

# evaluate options
for o, a in opts:
    if o in ("-u", "--unattended"):
        unattended = True
    elif o in ("-e", "--default"):
        setup_mode = 'default'
        unattended = True
        setup = True
    elif o in ("-o", "--do-it-like-babo"):
        setup_mode = 'babo'
        unattended = True
        setup = True
    elif o in ("-x", "--force"):
        force = True
    elif o in ("-c", "--createcert"):
        createcert = True
    elif o in ("-w", "--swapsize"):
        swapsize = str(a)
    elif o in ("-p", "--profile"):
        if a in profile_list:
            profile = a
        else:
            usage(1)
    elif o in ("-t", "--hostname"):
        hostname = a
    elif o in ("-l", "--pvdevice"):
        pvdevice = a
    elif o in ("-v", "--volumes"):
        lvmvols = a
    elif o in ("-r", "--serverip"):
        serverip = a
    elif o in ("-b", "--reboot"):
        reboot = True
    elif o in ("-i", "--initial"):
        initial = True
    elif o in ("-j", "--no-keys"):
        nokeys = True
    elif o in ("-k", "--no-pw"):
        nopw = True
    elif o in ("-s", "--setup"):
        setup = True
    elif o in ("-d", "--domain"):
        domainname = a
    elif o in ("-a", "--rootpw"):
        rootpw = a
    elif o in ("-n", "--ipnet"):
        ipnet = a
    elif o in ("-f", "--firewall"):
        firewallip = a
    elif o in ("-g", "--gateway"):
        gateway = a
    elif o in ("-h", "--help"):
        usage(0)
    else:
        assert False, "unhandled option"
        usage(1)

# exit if system is already set up
if force:
    print("## Force is given, skipping test for configured system.")
else:
    if os.path.isfile(setupini):
        print("## Don't do this on an already configured system!")
        sys.exit(1)

# check mandatory values
if setup_mode is not None:
    if profile is None and profile_ini is not None:
        profile = profile_ini
if not profile in profile_list or profile is None:
    print('Invalid profile!')
    usage(1)
if profile != 'server':
    pvdevice = None
    hostname = profile
else:
    if hostname is None:
        hostname = 'server'
if profile is None:
    usage(1)
if profile == 'server':
    ipnr = '1'
else:
    ipnr = '21'
if setup is False and initial is False:
    print('You have to provide either -i or -s!')
    usage(1)
if setup == True and initial == True:
    print("-i and -s don't work together!")
    usage(1)
if setup is False and profile != 'ubuntu' and createcert == True:
    print("-c can only be used together with -s and ubuntu profile!")
    usage(1)
if setup is False and nokeys == True:
    print("-j can only be used in setup mode!")
    usage(1)
if force is False and nokeys == True:
    print("-j can only be used together with -x!")
    usage(1)
if setup is False and nopw == True:
    print("-k can only be used in setup mode!")
    usage(1)
if force is False and nopw == True:
    print("-k can only be used together with -x!")
    usage(1)
if pvdevice is not None and not initial:
    print('LVM setup works only with -i!')
    usage(1)
if lvmvols is None:
    lvmvols = lvmvols_default
if not unattended:
    # do not set in interactive mode
    reboot = False


# main
print('## Profile: ' + profile)


# get & check network values -- begin
print('## Network')

# get network interface
iface_list, iface_default = getDefaultIface()
if len(iface_list) == 0:
    print('# No network interfaces found!')
    sys.exit(1)
# input interface if not unattended
iface = inputIface(iface, iface_default, iface_list) if not unattended else iface_default

# set default ip address & netmask
if setup_mode == 'babo':
    ipnet = ipnet_babo + ipnr + '/' + bitmask_babo
elif setup_mode == 'default' or ipnet is None:
    ipnet = ipnet_default + ipnr + '/' + bitmask_default

# host ip/net
ipnet_saved = ipnet
while True:
    ipnet = inputIpnet(ipnet_saved) if not unattended else ipnet_saved
    try:
        n = IP(ipnet, make_net=True)
        hostip = ipnet.split('/')[0]
        network = IP(n).strNormal(0)
        bitmask = IP(n).strNormal(1).split('/')[1]
        netmask = IP(n).strNormal(2).split('/')[1]
        broadcast = IP(n).strNormal(3).split('-')[1]
        o1, o2, o3, o4 = hostip.split('.')
        break
    except:
        print(f'# {ipnet} is not valid!')
        sys.exit(1) if unattended else print('Try again.')

# firewall ip
if firewallip is None:
    firewallip = o1 + '.' + o2 + '.' + o3 + '.254'
firewallip_saved = firewallip
while True:
    firewallip = inputFirewallip(firewallip_saved) if not unattended else firewallip_saved
    if ipMatchNet(firewallip, network, bitmask):
        break
    else:
        print(f'# {firewallip} is not valid!')
        sys.exit(1) if unattended else print('Try again.')

# gateway ip
if gateway is None:
    gateway = firewallip
gateway_saved = gateway
while True:
    gateway = inputGateway(gateway_saved) if not unattended else gateway_saved
    if ipMatchNet(gateway, network, bitmask):
        break
    else:
        print(f'# {gateway} is not valid!')
        sys.exit(1) if unattended else print('Try again.')
 
# hostname
hostname_saved = hostname
while True:
    hostname = inputHostname(hostname_saved) if not unattended else hostname_saved
    if isValidHostname(hostname):
        break
    else:
        print(f'# {hostname} is not valid!')
        sys.exit(1) if unattended else print('Try again.')

# domainname
domainname_saved = domainname
while True:
    domainname = inputHostname(domainname_saved) if not unattended else domainname_saved
    if isValidDomainname(domainname):
        break
    else:
        print(f'# {domainname} is not valid!')
        sys.exit(1) if unattended else print('Try again.')
# get & check network values -- end


# get & check lvm values -- begin
if initial:
    print('## LVM')
    pvdevice_saved = pvdevice
    while True:
        pvdevice = inputPvdevice(pvdevice_saved) if not unattended else pvdevice_saved
        if pvdevice is not None:
            if pathlib.Path(pvdevice).is_block_device():
                break
            else:
                print(f'# {pvdevice} is not a block device!')
                sys.exit(1) if unattended else print('Try again.')
        else:
            break
    # get & check lvm volume defs
    if pvdevice is not None:
        # check if volume group exists already
        res = subprocess.call('LANG=C vgdisplay | grep "VG Name" | grep -w ' + vgname, shell = True)
        if res == 0:
            print('# Volume group ' + vgname + ' exists already!')
            vg_exists = True
        else:
            # process lvm volumes
            lvmvols_saved = lvmvols
            while True:
                lvmvols = inputLvmvols(lvmvols_saved) if not unattended else lvmvols_saved
                lvmvols_array = do_lvmvols_array(lvmvols, lvmmand)
                if lvmvols_array is None:
                    print(f'# There is something wrong with your volume definition: {lvmvols}!')
                    sys.exit(1) if unattended else print('Try again.')
                else:
                    break
# get & check lvm values -- end


# get & check swapsize
print('## Swap')
swapsize_saved = swapsize
while True:
    swapsize = inputSwapsize(swapsize_saved) if not unattended else swapsize_saved
    if str.isdigit(swapsize):
        break
    else:
        print(f'# Swapsize is not an integer!')
        sys.exit(1) if unattended else print('Try again.')


# initial prepare
if initial:
    serverip = ''
    rootpw = rootpw_default
    do_updates()
    do_cleaning()
    # check lvm data
    if profile == 'server':
        if pvdevice is None:
            do_fstab_root()
        elif not vg_exists:
            do_lvm()
        do_quota()
        do_install(srvpkgs)
    # activate serial console
    subprocess.call('systemctl enable serial-getty@ttyS0.service', shell=True)
    subprocess.call('systemctl start serial-getty@ttyS0.service', shell=True)
    do_password(rootpw)
    dnssearch = ''
# setup mode
elif setup:
    do_swap(swapsize)
    # write hostname before keys and certificates were created
    writeTextfile('/etc/hostname', hostname + '.' + domainname, 'w')
    if not nokeys:
        do_keys()
    if profile == 'ubuntu' and createcert:
        do_sslcert(profile, domainname)
    if not nopw:
        do_password(rootpw)
    dnssearch = 'search: [' + domainname + ']'


# write configs, common and issue specific
print('## Writing configuration')
subprocess.call('mkdir -p ' + libdir, shell=True)
# delete cloud-init netcfg if present (we provide our own)
if os.path.isdir('/etc/netplan'):
    subprocess.call('rm -f /etc/netplan/*.yaml', shell=True)
# set hostname persistent
cloudcfg = '/etc/cloud/cloud.cfg'
replstr = 'preserve_hostname: false'
if os.path.isfile(cloudcfg):
    rc, content = readTextfile(cloudcfg)
    if replstr in content:
        content = content.replace(replstr, replstr.replace('false', 'true'))
        rc = writeTextfile(cloudcfg, content, 'w')
for item in os.listdir(templates):
    rc, content = readTextfile(templates + '/' + item)
    # extract oufile path from first line
    firstline = re.findall(r'# .*\n', content)[0]
    outfile = firstline.partition(' ')[2].replace('\n', '')
    # replace placeholders
    content = content.replace('@@iface@@', iface)
    content = content.replace('@@hostip@@', hostip)
    content = content.replace('@@hostname@@', hostname)
    content = content.replace('@@bitmask@@', bitmask)
    content = content.replace('@@netmask@@', netmask)
    content = content.replace('@@network@@', network)
    content = content.replace('@@broadcast@@', broadcast)
    content = content.replace('@@profile@@', profile)
    content = content.replace('@@firewallip@@', firewallip)
    content = content.replace('@@gateway@@', gateway)
    content = content.replace('@@domainname@@', domainname)
    content = content.replace('@@dnssearch@@', dnssearch)
    content = content.replace('@@swapsize@@', swapsize)
    #content = content.replace('@@resolvconf@@', resolvconf)
    if outfile == prepini and profile == 'server':
        content = content.replace('@@serverip@@', hostip)
    else:
        content = content.replace('@@serverip@@', serverip)
    # repair missing serverip in netcfg.yaml
    content = content.replace('[,', '[')
    # add date string
    content = '# modified by lmn71-prepare at ' + dtStr() + '\n' + content
    # write outfile
    writeTextfile(outfile, content, 'w')

# merge inifiles if setup.ini is present
if os.path.isfile(setupini):
    mergeInis()

# save hostname
outfile = '/etc/hostname'
content = hostname + '.' + domainname
writeTextfile(outfile, content, 'w')

# print values
print_values(profile, hostname, domainname, hostip, netmask, firewallip, iface, swapsize, pvdevice, vg_exists)

print('\n### Finished - a reboot is necessary!')

if not updates:
    print("\n### Don't forget to dist-upgrade the system before setup!")

if unattended and reboot:
    print('\n### Reboot requested ...')
    subprocess.call('/sbin/reboot', shell=True)
